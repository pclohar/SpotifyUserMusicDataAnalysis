{"ast":null,"code":"var _jsxFileName = \"/Volumes/Documents/SPOTIFY API/spotify-web-api/client/src/Components/StickyHeadTable.js\";\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nconst columns = [{\n  id: 'track',\n  label: 'Track',\n  width: '40%'\n}, {\n  id: 'artist',\n  label: 'Artist',\n  width: '20%'\n}, {\n  id: 'release_date',\n  label: 'Release Date',\n  width: '15%',\n  align: 'left'\n}, {\n  id: 'duration',\n  label: 'Duration',\n  width: '15%',\n  align: 'left'\n}, {\n  id: 'popularity',\n  label: 'Popularity',\n  width: '10%',\n  align: 'right'\n}];\n\nfunction millisToMinutesAndSeconds(millis) {\n  var minutes = Math.floor(millis / 60000);\n  var seconds = (millis % 60000 / 1000).toFixed(0);\n  return minutes + \":\" + (seconds < 10 ? '0' : '') + seconds;\n}\n\nfunction createData(track, artist, release_date, duration, popularity) {\n  return {\n    track,\n    artist,\n    release_date,\n    duration,\n    popularity\n  };\n}\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n    opacity: '0.5'\n  },\n  container: {\n    maxHeight: 440\n  }\n});\nexport default function StickyHeadTable({\n  recent_songs\n}) {\n  const classes = useStyles();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  const recentSongList = recent_songs.map(song => createData(song.track.name, song.track.album.artists[0].name, song.track.album.release_date, millisToMinutesAndSeconds(song.track.duration_ms) + \" mins\", song.track.popularity));\n  return /*#__PURE__*/React.createElement(Paper, {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TableContainer, {\n    className: classes.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    stickyHeader: true,\n    \"aria-label\": \"sticky table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, columns.map(column => /*#__PURE__*/React.createElement(TableCell, {\n    key: column.id,\n    align: column.align,\n    style: {\n      width: column.width\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  }, column.label)))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, recentSongList.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(recentSongList => {\n    return /*#__PURE__*/React.createElement(TableRow, {\n      hover: true,\n      role: \"checkbox\",\n      tabIndex: -1,\n      key: recentSongList.code,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }\n    }, columns.map(column => {\n      const value = recentSongList[column.id];\n      return /*#__PURE__*/React.createElement(TableCell, {\n        key: column.id,\n        align: column.align,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 23\n        }\n      }, column.format && typeof value === 'number' ? column.format(value) : value);\n    }));\n  })))), /*#__PURE__*/React.createElement(TablePagination, {\n    rowsPerPageOptions: [10, 25, 100],\n    component: \"div\",\n    count: recentSongList.length,\n    rowsPerPage: rowsPerPage,\n    page: page,\n    onChangePage: handleChangePage,\n    onChangeRowsPerPage: handleChangeRowsPerPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Volumes/Documents/SPOTIFY API/spotify-web-api/client/src/Components/StickyHeadTable.js"],"names":["React","makeStyles","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TablePagination","TableRow","columns","id","label","width","align","millisToMinutesAndSeconds","millis","minutes","Math","floor","seconds","toFixed","createData","track","artist","release_date","duration","popularity","useStyles","root","opacity","container","maxHeight","StickyHeadTable","recent_songs","classes","page","setPage","useState","rowsPerPage","setRowsPerPage","handleChangePage","event","newPage","handleChangeRowsPerPage","target","value","recentSongList","map","song","name","album","artists","duration_ms","column","slice","code","format","length"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\n\nconst columns = [\n  { id: 'track', label: 'Track', width: '40%' },\n  { id: 'artist', label: 'Artist', width: '20%' },\n  {\n    id: 'release_date',\n    label: 'Release Date',\n    width: '15%',\n    align: 'left',\n\n  },\n  {\n    id: 'duration',\n    label: 'Duration',\n    width: '15%',\n    align: 'left'\n  },\n  {\n    id: 'popularity',\n    label: 'Popularity',\n    width: '10%',\n    align: 'right',\n  },\n];\n\nfunction millisToMinutesAndSeconds(millis) {\n    var minutes = Math.floor(millis / 60000);\n    var seconds = ((millis % 60000) / 1000).toFixed(0);\n    return minutes + \":\" + (seconds < 10 ? '0' : '') + seconds;\n  }\n\nfunction createData(track, artist, release_date, duration, popularity) {\n  return { track, artist, release_date, duration, popularity };\n}\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n    opacity : '0.5'\n  },\n  container: {\n    maxHeight: 440,\n  },\n});\n\nexport default function StickyHeadTable({recent_songs}) {\n  const classes = useStyles();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n    const recentSongList = recent_songs.map(song => \n        createData(song.track.name, song.track.album.artists[0].name, song.track.album.release_date, millisToMinutesAndSeconds(song.track.duration_ms)+\" mins\", song.track.popularity)\n        \n      );\n  return (\n\n    <Paper className={classes.root}>\n      <TableContainer className={classes.container}>\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow>\n              {columns.map((column) => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ width: column.width }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {recentSongList.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((recentSongList) => {\n              return (\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={recentSongList.code}>\n                  {columns.map((column) => {\n                    const value = recentSongList[column.id];\n                    return (\n                      <TableCell key={column.id} align={column.align}>\n                        {column.format && typeof value === 'number' ? column.format(value) : value}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[10, 25, 100]}\n        component=\"div\"\n        count={recentSongList.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n      />\n    </Paper>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}